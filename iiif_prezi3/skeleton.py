# generated by datamodel-codegen:
#   filename:  iiif_3_0.json
#   timestamp: 2025-09-19T00:09:12+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, Extra, Field, PositiveFloat, PositiveInt, constr

from .base import Base


class Behavior(Base):
    __root__: List[
        Union[
            constr(regex=r'^auto-advance$'),
            constr(regex=r'^no-auto-advance$'),
            constr(regex=r'^repeat$'),
            constr(regex=r'^no-repeat$'),
            constr(regex=r'^unordered$'),
            constr(regex=r'^individuals$'),
            constr(regex=r'^continuous$'),
            constr(regex=r'^paged$'),
            constr(regex=r'^facing-pages$'),
            constr(regex=r'^non-paged$'),
            constr(regex=r'^multi-part$'),
            constr(regex=r'^together$'),
            constr(regex=r'^sequence$'),
            constr(regex=r'^thumbnail-nav$'),
            constr(regex=r'^no-nav$'),
            constr(regex=r'^hidden$'),
        ]
    ]


class NavDate(Base):
    __root__: datetime


class Rights(Base):
    __root__: AnyUrl = Field(
        ...,
        description="Rights URI isn't from either Creative Commons or RightsStatements.org. Both require http links.",
        title='rights',
    )


class ViewingDirection(Base):
    __root__: Union[
        constr(regex=r'^left-to-right$'),
        constr(regex=r'^right-to-left$'),
        constr(regex=r'^top-to-bottom$'),
        constr(regex=r'^bottom-to-top$'),
    ]


class Id(Base):
    __root__: AnyUrl = Field(
        ..., description='Id must be present and must be a URI', title='id'
    )


class LngString(Base):
    class Config:
        extra = Extra.forbid

    __root__: Union[
        Dict[constr(regex=r'^[a-zA-Z-][a-zA-Z-]*$'), List[str]],
        Dict[constr(regex=r'^none$'), List[str]],
    ] = Field(
        ...,
        description='Language string, must have a language and value must be an array.',
        title='LngString',
    )


class Choice(Base):
    type: str = Field('Choice', const=True)
    items: List


class BCP47(Base):
    __root__: Union[constr(regex=r'^[a-zA-Z-][a-zA-Z-]*$'), constr(regex=r'^none$')] = (
        Field(..., title='BCP47')
    )


class Dimension(Base):
    __root__: PositiveInt = Field(..., title='dimension')


class Duration(Base):
    __root__: PositiveFloat = Field(..., title='duration')


class Format(Base):
    __root__: constr(regex=r'^[a-z][a-z]*/.*$') = Field(..., title='format')


class PointSelector(Base):
    type: constr(regex=r'^PointSelector$') = 'PointSelector'
    t: Optional[Duration] = None
    x: Optional[Dimension] = None
    y: Optional[Dimension] = None


class FragmentSelector(Base):
    type: constr(regex=r'^FragmentSelector$') = 'FragmentSelector'
    conformsTo: AnyUrl = 'http://www.w3.org/TR/media-frags/'
    value: Any


class SVGSelector(Base):
    type: constr(regex=r'^SvgSelector$') = 'SvgSelector'
    value: Any


class ImageAPISelector(Base):
    type: constr(regex=r'^ImageApiSelector$') = 'ImageApiSelector'
    region: Optional[Any] = None
    size: Optional[Any] = None
    rotation: Optional[Any] = None
    quality: Optional[Any] = None
    format: Optional[Any] = None


class Selector(Base):
    __root__: Union[
        AnyUrl, PointSelector, FragmentSelector, SVGSelector, ImageAPISelector
    ]


class NavPlace(Base):
    id: Optional[Id] = None
    type: str = 'FeatureCollection'
    features: Optional[List[Dict[str, Any]]] = None


class TextualBody(Base):
    id: Optional[Id] = None
    type: constr(regex=r'^TextualBody$') = 'TextualBody'
    value: str
    format: Optional[Format] = None
    language: Optional[str] = None


class Class(Base):
    id: Id
    type: str
    label: Optional[LngString] = None


class LinkedResource(Class):
    format: Optional[Format] = None
    profile: Optional[str] = None


class LinkedResources(Base):
    __root__: List[LinkedResource] = Field(..., title='LinkedResources')


class KeyValueString(Base):
    label: LngString
    value: LngString


class Homepage(Class):
    format: Optional[Format] = None
    language: Optional[List[BCP47]] = None


class Homepages(Base):
    __root__: List[Homepage] = Field(..., title='homepages')


class Metadata(Base):
    __root__: List[KeyValueString]


class PartOf(Base):
    __root__: List[Class]


class SeeAlso(Base):
    __root__: LinkedResources


class AbstractIIIFResource(Base):
    __root__: Union[Manifest, Collection, AnnotationCollection, AnnotationPage] = Field(
        ..., title='AbstractIIIFResource'
    )


class AnnotationCollection(Class):
    type: constr(regex=r'^AnnotationCollection$') = 'AnnotationCollection'
    rendering: Optional[LinkedResources] = None
    partOf: Optional[PartOf] = None
    next: Optional[AnnotationPageRef] = None
    first: Optional[AnnotationPageRef] = None
    last: Optional[AnnotationPageRef] = None
    service: Optional[Service] = None
    total: Optional[PositiveInt] = None
    thumbnail: Optional[List[Resource]] = None
    items: List[Annotation]


class AnnotationPage(Class):
    context: Optional[Union[List[AnyUrl], str]] = Field(None, alias='@context')
    id: Id
    type: constr(regex=r'^AnnotationPage$') = 'AnnotationPage'
    rendering: Optional[LinkedResources] = None
    label: Optional[LngString] = None
    service: Optional[Service] = None
    thumbnail: Optional[List[Resource]] = None
    items: List[Annotation]
    partOf: Optional[List[Union[AnnotationCollection, AnnotationCollectionRef]]] = None
    next: Optional[AnnotationPageRef] = None
    prev: Optional[AnnotationPageRef] = None
    first: Optional[AnnotationPageRef] = None
    last: Optional[AnnotationPageRef] = None


class Collection(Class):
    type: constr(regex=r'^Collection') = Field(
        'Collection',
        description='If you are validating a manifest, you may get this error if there are errors in the manifest. The validator first validates it as a manifest and if that fails it will try and validate it using the other types.',
        title='Collection',
    )
    metadata: Optional[Metadata] = None
    summary: Optional[LngString] = None
    requiredStatement: Optional[KeyValueString] = None
    rendering: Optional[LinkedResources] = None
    rights: Optional[Rights] = None
    navDate: Optional[NavDate] = None
    navPlace: Optional[NavPlace] = None
    provider: Optional[Providers] = None
    seeAlso: Optional[SeeAlso] = None
    services: Optional[Service] = None
    service: Optional[Service] = None
    placeholderCanvas: Optional[PlaceholderCanvas] = None
    accompanyingCanvas: Optional[AccompanyingCanvas] = None
    thumbnail: Optional[List[Resource]] = None
    homepage: Optional[Homepages] = None
    behavior: Optional[Behavior] = None
    partOf: Optional[PartOf] = None
    items: Optional[List[Union[ManifestRef, CollectionRef, Collection]]] = None
    annotations: Optional[List[Union[AnnotationPage, AnnotationPageRef]]] = None


class Manifest(Class):
    context: Optional[Union[List[AnyUrl], str]] = Field(None, alias='@context')
    id: Id
    label: LngString
    type: constr(regex=r'^Manifest') = 'Manifest'
    metadata: Optional[Metadata] = None
    summary: Optional[LngString] = None
    requiredStatement: Optional[KeyValueString] = None
    rendering: Optional[LinkedResources] = None
    service: Optional[Service] = None
    services: Optional[Service] = None
    viewingDirection: Optional[ViewingDirection] = None
    placeholderCanvas: Optional[PlaceholderCanvas] = None
    accompanyingCanvas: Optional[AccompanyingCanvas] = None
    rights: Optional[Rights] = None
    start: Optional[Any] = None
    navDate: Optional[NavDate] = None
    navPlace: Optional[NavPlace] = None
    provider: Optional[Providers] = None
    seeAlso: Optional[SeeAlso] = None
    thumbnail: Optional[List[Resource]] = None
    homepage: Optional[Homepages] = None
    behavior: Optional[Behavior] = None
    partOf: Optional[PartOf] = None
    items: List[Canvas]
    structures: Optional[List[Range]] = None
    annotations: Optional[List[Union[AnnotationPage, AnnotationPageRef]]] = None


class AccompanyingCanvas(Class):
    type: constr(regex=r'^Canvas$') = 'Canvas'
    height: Optional[Dimension] = None
    width: Optional[Dimension] = None
    duration: Optional[Duration] = None
    metadata: Optional[Metadata] = None
    summary: Optional[LngString] = None
    requiredStatement: Optional[KeyValueString] = None
    rendering: Optional[LinkedResources] = None
    rights: Optional[Rights] = None
    navDate: Optional[NavDate] = None
    navPlace: Optional[NavPlace] = None
    provider: Optional[Providers] = None
    seeAlso: Optional[SeeAlso] = None
    service: Optional[Service] = None
    thumbnail: Optional[List[Resource]] = None
    homepage: Optional[Homepages] = None
    behavior: Optional[Behavior] = None
    partOf: Optional[PartOf] = None
    items: List[AnnotationPage]
    annotations: Optional[List[Union[AnnotationPage, AnnotationPageRef]]] = None


class Body(Choice):
    items: List[Resource]


class Annotation(Class):
    class Config:
        extra = Extra.allow

    type: constr(regex=r'^Annotation$') = 'Annotation'
    service: Optional[Service] = None
    rendering: Optional[LinkedResources] = None
    thumbnail: Optional[List[Resource]] = None
    motivation: Optional[Union[str, List[str]]] = None
    body: Optional[Union[Resource, Body, List[Dict[str, Any]]]] = None
    target: Union[AnnoTarget, List[AnnoTarget]]


class AnnotationCollectionRef(Base):
    __root__: Union[str, AnnotationCollectionRefExtended]


class AnnotationPageRef(Base):
    __root__: Union[str, AnnotationPageRefExtended]


class Canvas(Class):
    type: constr(regex=r'^Canvas$') = 'Canvas'
    height: Optional[Dimension] = None
    width: Optional[Dimension] = None
    duration: Optional[Duration] = None
    metadata: Optional[Metadata] = None
    summary: Optional[LngString] = None
    requiredStatement: Optional[KeyValueString] = None
    rendering: Optional[LinkedResources] = None
    rights: Optional[Rights] = None
    navDate: Optional[NavDate] = None
    navPlace: Optional[NavPlace] = None
    provider: Optional[Providers] = None
    seeAlso: Optional[SeeAlso] = None
    service: Optional[Service] = None
    placeholderCanvas: Optional[PlaceholderCanvas] = None
    accompanyingCanvas: Optional[AccompanyingCanvas] = None
    thumbnail: Optional[List[Resource]] = None
    homepage: Optional[Homepages] = None
    behavior: Optional[Behavior] = None
    partOf: Optional[PartOf] = None
    items: List[AnnotationPage]
    annotations: Optional[List[Union[AnnotationPage, AnnotationPageRef]]] = None


class PlaceholderCanvas(Class):
    type: constr(regex=r'^Canvas$') = 'Canvas'
    height: Optional[Dimension] = None
    width: Optional[Dimension] = None
    duration: Optional[Duration] = None
    metadata: Optional[Metadata] = None
    summary: Optional[LngString] = None
    requiredStatement: Optional[KeyValueString] = None
    rendering: Optional[LinkedResources] = None
    rights: Optional[Rights] = None
    navDate: Optional[NavDate] = None
    navPlace: Optional[NavPlace] = None
    provider: Optional[Providers] = None
    seeAlso: Optional[SeeAlso] = None
    service: Optional[Service] = None
    thumbnail: Optional[List[Resource]] = None
    homepage: Optional[Homepages] = None
    behavior: Optional[Behavior] = None
    partOf: Optional[PartOf] = None
    items: List[AnnotationPage]
    annotations: Optional[List[Union[AnnotationPage, AnnotationPageRef]]] = None


class Provider(Class):
    type: constr(regex=r'^Agent$') = 'Agent'
    homepage: Optional[Homepages] = None
    logo: Optional[List[Resource]] = None
    seeAlso: Optional[SeeAlso] = None


class Providers(Base):
    __root__: List[Provider] = Field(..., title='providers')


class Range(Class):
    type: constr(regex=r'^Range$') = 'Range'
    rendering: Optional[LinkedResources] = None
    supplementary: Optional[Union[AnnotationCollection, AnnotationCollectionRef]] = None
    service: Optional[Service] = None
    placeholderCanvas: Optional[PlaceholderCanvas] = None
    accompanyingCanvas: Optional[AccompanyingCanvas] = None
    behavior: Optional[Behavior] = None
    annotations: Optional[List[Union[AnnotationPage, AnnotationPageRef]]] = None
    thumbnail: Optional[List[Resource]] = None
    items: List[Union[SpecificResource, Canvas, Range, RangeRef, CanvasRef]]


class AnnotationBody(Base):
    id: Id
    type: str
    height: Optional[Dimension] = None
    width: Optional[Dimension] = None
    duration: Optional[Duration] = None
    language: Optional[str] = None
    rendering: Optional[LinkedResources] = None
    service: Optional[Service] = None
    format: Optional[Format] = None
    label: Optional[LngString] = None
    thumbnail: Optional[List[Resource]] = None
    annotations: Optional[List[Union[AnnotationPage, AnnotationPageRef]]] = None


class Resource(Base):
    __root__: Union[AnnotationBody, TextualBody, SpecificResource]


class ServiceV3(Class):
    class Config:
        extra = Extra.allow

    class Config:
        extra = Extra.allow

    profile: Optional[str] = None
    service: Optional[Service] = None


class ServiceV2(Base):
    class Config:
        extra = Extra.allow

    id: Id = Field(..., alias='@id')
    type: str = Field(..., alias='@type')
    profile: Optional[str] = None
    service: Optional[Service] = None


class Service(Base):
    __root__: List[Union[ServiceV3, ServiceV2]]


class AnnoTarget(Base):
    __root__: Union[AnyUrl, SpecificResource]


class SpecificResource(Base):
    id: Optional[Id] = None
    type: constr(regex=r'^SpecificResource$') = 'SpecificResource'
    format: Optional[Format] = None
    accessibility: Optional[str] = None
    source: Union[Id, Resource]
    scope: Optional[Id] = None
    selector: Optional[Union[Selector, List[Selector]]] = None


class Reference(Base):
    class Config:
        extra = Extra.allow

    id: Id
    label: Optional[LngString] = None
    type: constr(
        regex=r'^Manifest$|^AnnotationPage$|^Collection$|^AnnotationCollection$|^Canvas$|^Range$'
    )
    thumbnail: Optional[List[Resource]] = None


class AnnotationCollectionRefExtended(Reference):
    type: Optional[constr(regex=r'^AnnotationCollection$')] = None


class AnnotationPageRefExtended(Reference):
    type: Optional[constr(regex=r'^AnnotationPage$')] = None


class CollectionRef(Reference):
    type: Optional[constr(regex=r'^Collection$')] = None
    label: LngString


class ManifestRef(Reference):
    type: constr(regex=r'^Manifest$') = 'Manifest'
    label: LngString


class CanvasRef(Reference):
    type: Optional[constr(regex=r'^Canvas$')] = None


class RangeRef(Reference):
    type: Optional[constr(regex=r'^Range$')] = None


AbstractIIIFResource.update_forward_refs()
AnnotationCollection.update_forward_refs()
AnnotationPage.update_forward_refs()
Collection.update_forward_refs()
Manifest.update_forward_refs()
AccompanyingCanvas.update_forward_refs()
Body.update_forward_refs()
Annotation.update_forward_refs()
AnnotationCollectionRef.update_forward_refs()
AnnotationPageRef.update_forward_refs()
Canvas.update_forward_refs()
PlaceholderCanvas.update_forward_refs()
Provider.update_forward_refs()
Range.update_forward_refs()
AnnotationBody.update_forward_refs()
Resource.update_forward_refs()
ServiceV3.update_forward_refs()
ServiceV2.update_forward_refs()
AnnoTarget.update_forward_refs()
